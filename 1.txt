
    private void getAliyunHandIDImageUrl() {
        File certifationFile = new File(HAND_ID_IMAGE_PATH);
        Bitmap bitmap1 = null;
        File file1 = null;
        try {
            bitmap1 = BitmpTools.revitionImageSize(certifationFile.getAbsolutePath());
            file1 =compressImage(bitmap1);
            String HandabsolutePath = file1.getAbsolutePath();
            AliYunImageUtils.newInstance().uploadImage(this, HandabsolutePath, new ResultListener() {
                @Override
                public void onSucess(String data) {
                    LogUtils.e("手持身份证正面照: " + data);
                    uploadImageCount++;
                    handIdImageNetPath = data;
                }

                @Override
                public void onFaild() {
                    showToast("上传手持身份证正面照失败,请重试");
                    uploadImageCount = 0;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    private void getAliyunIDImageUrl() {

        File idCardfile = new File(ID_IMAGE_PATH);
        Bitmap bitmap1 = null;
        File file1 = null;
        try {
            bitmap1 = BitmpTools.revitionImageSize(idCardfile.getAbsolutePath());
            file1 =compressImage(bitmap1);
            String IDImageabsolutePath = file1.getAbsolutePath();
            AliYunImageUtils.newInstance().uploadImage(this,IDImageabsolutePath, new ResultListener() {
                @Override
                public void onSucess(String data) {
                    LogUtils.e("身份证正面照地址: " + data);
                    idImageNetPath = data;
                    uploadImageCount++;

                }

                @Override
                public void onFaild() {
                    showToast("上传身份证正面照失败,请重试");
                    uploadImageCount = 0;
                }
            });

        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    /**
     * 照片标记
     * <p>
     * NONE:未选择
     * <p>
     * ID_CARD：身份证照片
     * <p>
     * HAND_ID_CARD：手持身份证照片
     */
    enum PICTURE_FLAG {
        NONE, ID_CARD, HAND_ID_CARD
    }

    @Override
    protected void onDestroy() {
        mTimer.cancel();
        mTimer = null;
        super.onDestroy();
    }

    private static File compressImage(Bitmap image) {
        String filePath = Environment.getExternalStorageDirectory().toString();
        String fileName = System.currentTimeMillis() + ".jpg";
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        image.compress(Bitmap.CompressFormat.JPEG, 70, baos);//质量压缩方法，这里100表示不压缩，把压缩后的数据存放到baos中
        return byte2File(baos.toByteArray(),filePath,fileName);

    }

    public static File byte2File(byte[] buf, String filePath, String fileName)
    {
        BufferedOutputStream bos = null;
        FileOutputStream fos = null;
        File file = null;
        try {
            File dir = new File(filePath);
            if (!dir.exists() && dir.isDirectory())
            {
                dir.mkdirs();
            }
            file = new File(filePath + File.separator + fileName);
            fos = new FileOutputStream(file);
            bos = new BufferedOutputStream(fos);
            bos.write(buf);

            return file;
        }catch (Exception e) {
            e.printStackTrace();
            return null;
        }finally{
            if (bos != null){
                try{
                    bos.close();
                }
                catch (IOException e){
                    e.printStackTrace();
                }
            }
            if (fos != null){
                try{
                    fos.close();
                }
                catch (IOException e){
                    e.printStackTrace();
                }
            }
        }
    }

}